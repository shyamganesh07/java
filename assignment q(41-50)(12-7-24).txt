41.find square and cube of decimal number:

public class c {
    public static void main(String[] args) {
        double number = 0.6;
        double square = number * number;
        double cube = number * number * number;        
	System.out.println("Given Number: " + number);
        System.out.println("Square Number: " + square);
        System.out.println("Cube Number: " + cube);
    }
}

42.Find the nth odd number after n odd number


public class v{
    public static void main(String[] args) {
        int N = 7;
        int n = 2 * N - 1;
        int result = n + 2 * N;
        System.out.println("The " + N + "th odd number is: " + n);
        System.out.println("The " + N + "th odd number after " + n + " is: " + result);
    }
}


43.	Program to find the frequency of each element in the array.

    
public class v {
    public static void main(String[] args) {
        int[] a = {1, 2, 2, 3, 3, 4, 5};
        int n = a.length;
        boolean[] x = new boolean[n];

        for (int i = 0; i < n; i++) {
            if (!x[i]) {
                int c = 0;
                for (int j = 0; j < n; j++) {
                    if (a[i] == a[j]) {
                        c++;
                        x[j] = true;
                    }
                }
                System.out.println(a[i] + " -> " + c);
            }
        }
    }
}

44.	Program to find whether the given number is Armstrong number or not

public class v {
    public static void main(String[] args) {
        int num = 153;
        int m, r, x = 0, n = 0;
        m = num;
        while (m != 0) {
            m /= 10;
            ++n;
        }

        m = num;
        while (m != 0) {
            r = m % 10;
            x += Math.pow(r, n);
            m /= 10;
        }
        if (x == num)
            System.out.println(num + " is an Armstrong number.");
        else
            System.out.println(num + " is not an Armstrong number.");
    }
}

45.Write a program to find the sum of digits of N digit number (sum should be single digit)

public class v{
    public static void main(String[] args){
        int n=153,s=0;
        while(n>0){
            int r=n%10;
            s=s+r;
            n=n/10;
        }
        System.out.println("Output:"+s);
    }
}

46.Write a program to find the square root of a perfect square number(print both the positive and negative values)

public class v{
    public static void main(String[] args){
        int n=6561;
        for(int i=1;i<=n/2;i++){
            if(n==i*i){
                System.out.print("Output:"+i+","+-i);
            }
        }
    }
}

47.	Write a program to given an integer n, return true if it is a power of three. Otherwise, return false.

public class v{
    public static void main(String[] args){
        int n=27;
        for(int i=1;i<=n/2;i++){
            if(n==i*i*i){
                System.out.print("Output:"+"True");
            }
        }
    }
}

47.	Write a program to given a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique.

public class DuplicateZeros {
    public static void main(String[] args) {
        int[] arr = {1, 0, 2, 3, 0, 4, 5, 0};
        System.out.print("Original Array: ");
        printArray(arr);
        duplicateZeros(arr);
        System.out.print("Modified Array: ");
        printArray(arr);
    }
    
    public static void duplicateZeros(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            if (arr[i] == 0) {
                for (int j = n - 1; j > i; j--) {
                    arr[j] = arr[j - 1];
                }
                arr[++i] = 0;
            }
        }
    }
    
    public static void printArray(int[] arr) {
        for (int num : arr) {
            System.out.print(num + " ");
        }
        System.out.println();
    }
}

49.Write a program to given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

public class MissingElement {
    public static void main(String[] args) {
        int[] a = {1, 2, 4, 5};
        int n = a.length + 1;
        int s = n * (n + 1) / 2;
        int x = 0;
        for (int i : a) {
            x += i;
        }
        int m = s - x;
        System.out.println("Missing number: " + m);
    }
}

50.Maximum sum subarray

public class M {
    public static void main(String[] args) {
        int[] a = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
        int s = a[0];
        int m = a[0];
        for (int i = 1; i < a.length; i++) {
            if (s < 0) {
                s= a[i];
            } else {
                s +=a[i];
            }
            if (s > m) {
                m = s;
            }
        }

        System.out.println("Output: " + m);
    }
}
